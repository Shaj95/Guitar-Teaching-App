<?xml version="1.0" encoding="utf-8"?>
<resources>
<string name="strings_and_notes1">
    "Learning to play the guitar can be quite daunting at first but it is quite a rewarding journey if you stick with it! As with learning any new task, always remember that it looks harder than it is.
You must bear in mind that it will require about 2-3 months of consistent practice and working your way through all the teachings provided in this in order to be able to play the guitar on your own. Memorization is extremely important and will vastly speed up your learning process.

Once you’ve become good at it, you can enjoy playing the guitar anywhere, any time. You can play amongst your friends and even take it to the beach. The beautiful thing about this instrument is that it is very convenient in terms of logistics. So crack on with your learning and you’ll be playing some of your favorite tunes in no time!

In order to begin playing the guitar, it is essential to know the parts it comprises of; and these parts must be at the fingertips (pun intended) of every guitar player because you will interact with them on a regular basis.

This app will solely focus on an acoustic guitar's make up. New guitarists are advised to begin learning on an acoustic guitar before picking up an electric guitar.

The key parts of a guitar are shown in the image below:

"</string>

    <string name="strings_and_notes2">
        "Light and shadow.\n\n"

        "Within the material environment, virtual lights illuminate the scene. Key lights create "
        "directional shadows, while ambient light creates soft shadows from all angles.\n"
        "Shadows in the material environment are cast by these two light sources. In Android "
        "development, shadows occur when light sources are blocked by sheets of material at "
        "various positions along the z-axis. On the web, shadows are depicted by manipulating the "
        "y-axis only. The following example shows the card with a height of 6dp.\n\n"

        "Resting elevation.\n\n"

        "All material objects, regardless of size, have a resting elevation, or default elevation "
        "that does not change. If an object changes elevation, it should return to its resting "
        "elevation as soon as possible.\n\n"

        "Component elevations.\n\n"

        "The resting elevation for a component type is consistent across apps (e.g., FAB elevation "
        "does not vary from 6dp in one app to 16dp in another app).\n"
        "Components may have different resting elevations across platforms, depending on the depth "
        "of the environment (e.g., TV has a greater depth than mobile or desktop).\n\n"

        "Responsive elevation and dynamic elevation offsets.\n\n"

        "Some component types have responsive elevation, meaning they change elevation in response "
        "to user input (e.g., normal, focused, and pressed) or system events. These elevation "
        "changes are consistently implemented using dynamic elevation offsets.\n"
        "Dynamic elevation offsets are the goal elevation that a component moves towards, relative "
        "to the component’s resting state. They ensure that elevation changes are consistent "
        "across actions and component types. For example, all components that lift on press have "
        "the same elevation change relative to their resting elevation.\n"
        "Once the input event is completed or cancelled, the component will return to its resting "
        "elevation.\n\n"

        "Avoiding elevation interference.\n\n"

        "Components with responsive elevations may encounter other components as they move between "
        "their resting elevations and dynamic elevation offsets. Because material cannot pass "
        "through other material, components avoid interfering with one another any number of ways, "
        "whether on a per component basis or using the entire app layout.\n"
        "On a component level, components can move or be removed before they cause interference. "
        "For example, a floating action button (FAB) can disappear or move off screen before a "
        "user picks up a card, or it can move if a snackbar appears.\n"
        "On the layout level, design your app layout to minimize opportunities for interference. "
        "For example, position the FAB to one side of stream of a cards so the FAB won’t interfere "
        "when a user tries to pick up one of cards.\n\n"
    </string>
    <string name="strings_and_notes3">
         "Material is the metaphor.\n\n"

    "A material metaphor is the unifying theory of a rationalized space and a system of motion."
    "The material is grounded in tactile reality, inspired by the study of paper and ink, yet "
    "technologically advanced and open to imagination and magic.\n"
    "Surfaces and edges of the material provide visual cues that are grounded in reality. The "
    "use of familiar tactile attributes helps users quickly understand affordances. Yet the "
    "flexibility of the material creates new affordances that supercede those in the physical "
    "world, without breaking the rules of physics.\n"
    "The fundamentals of light, surface, and movement are key to conveying how objects move, "
    "interact, and exist in space and in relation to each other. Realistic lighting shows "
    "seams, divides space, and indicates moving parts.\n\n"

    "Bold, graphic, intentional.\n\n"
    </string>

</resources>